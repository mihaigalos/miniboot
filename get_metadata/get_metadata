var fs = require("fs");
var prompt = require('prompt-console');
var _ = require('lodash');
var crc32 = require('buffer-crc32');
var https = require("https");

var ended = false;
var instream;
var lineReader = require('readline');
console.log("STARTED!");
var charNum = 0;
var eepromMetaSize = 34;
// var baseMetaData = ['A', 'B', 'm', 'i', 'n', 'i', 'b', 'o', 'o', 't']; //Chars
var baseMetaData = [65, 66, 109, 105, 110, 105, 98, 111, 111, 116];	// ASCII values

function toHex(i) {
	runningTotal = ''
	quotient = hexQuotient(i);
	remainder = eval(i + '-(' + quotient + '* 16)');
	runningTotal = charToHex(remainder) + runningTotal;
	while( quotient >= 16) {
		savedQuotient = hexQuotient(quotient);
		remainder = eval(quotient + '-(' + savedQuotient + '* 16)');
		runningTotal = charToHex(remainder) + runningTotal;
		quotient = savedQuotient;
	} 
	return charToHex(quotient) + runningTotal ;
}

function hexQuotient(i) {
	return Math.floor(eval(i +'/ 16'));
}

function charToHex(i) {
	var hexChar;
	if (i == 0) {
		hexChar = '0' }
	else { if (i == 1) {
		hexChar = '1'}
	else { if (i == 2) {
		hexChar = '2'}
	else { if (i == 3) {
		hexChar = '3' }
	else { if (i == 4) {
		hexChar = '4'}
	else { if (i == 5) {
		hexChar = '5' }
	else { if (i == 6) {
		hexChar = '6'}
	else { if (i == 7) {
		hexChar = '7' }
	else { if (i == 8) {
		hexChar = '8'}
	else { if (i == 9) {
		hexChar = '9'}
	else { if (i ==10) {
		hexChar = 'A'}
	else { if (i ==11) {
		hexChar = 'B'}
	else { if (i ==12) {
		hexChar = 'C'}
	else { if (i ==13) {
		hexChar = 'D'}
	else { if (i ==14) {
		hexChar = 'E'}
	else { if (i ==15) {
		hexChar = 'F'}
	} } } } } } } } } } } } } } }
	return hexChar;
}

function getByteArrayLength(ByteArrayString){
	var res = ByteArrayString.match(/0x/g);
	console.log("COUNT=", res.length);
	return res.length;
}
var outputFile = `
#include <Wire.h>
#define EEPROM_ADDR 0x50           // I2C Buss address of 24LC256 256K EEPROM
`; 
var outputFileBody = `
	void setup()
	{
	  pinMode(3, OUTPUT);
	  Wire.begin();                        // join I2C bus (address optional for master)
	  Serial.begin(9600);
	  for(int j=0; j<5; j++){
	  	digitalWrite(3, HIGH);
	  	delay(j*100);
	  	digitalWrite(3, LOW);
	  	delay(j*j*50);
	  }
	  
	  for (int i=0; i<binLength; i++){
	   digitalWrite(3, i%2);
	   byte dataByte = pgm_read_byte_near(binData + i);
	   i2c_eeprom_write_byte(EEPROM_ADDR, i, dataByte);
	   Serial.println();
	   Serial.print("Wrote: "); Serial.print(dataByte, HEX); Serial.print(" @ ");Serial.print(i);
	   delay(100);
	  }
	  
	  for (int i=0; i<binLength; i++){            // loop for first 20 slots
	    Serial.print(i); Serial.print(":");
	    Serial.print((i2c_eeprom_read_byte(EEPROM_ADDR, i)), HEX);
	    delay(50);
	    Serial.println();
	  }  
	  
	}

	void loop()
	{
	}

	void i2c_eeprom_write_byte( int deviceaddress, unsigned int eeaddress, byte data )
	{
	  int rdata = data;
	  Wire.beginTransmission(deviceaddress);
	  Wire.write((int)(eeaddress >> 8));    // Address High Byte
	  Wire.write((int)(eeaddress & 0xFF));  // Address Low Byte
	  Wire.write(rdata);
	  Wire.endTransmission();
	}

	// Address is a page address, 6-bit (63). More and end will wrap around
	// But data can be maximum of 28 bytes, because the Wire library has a buffer of 32 bytes
	void i2c_eeprom_write_page
	( int deviceaddress, unsigned int eeaddresspage, byte* data, byte length )
	{
	  Wire.beginTransmission(deviceaddress);
	  Wire.write((int)(eeaddresspage >> 8)); // Address High Byte
	  Wire.write((int)(eeaddresspage & 0xFF)); // Address Low Byte
	  byte c;
	  for ( c = 0; c < length; c++)
	    Wire.write(data[c]);
	  Wire.endTransmission();
	  delay(10);                           // need some delay
	}

	byte i2c_eeprom_read_byte( int deviceaddress, unsigned int eeaddress )
	{
	  byte rdata = 0xFF;
	  Wire.beginTransmission(deviceaddress);
	  Wire.write((int)(eeaddress >> 8));    // Address High Byte
	  Wire.write((int)(eeaddress & 0xFF));  // Address Low Byte
	  Wire.endTransmission();
	  Wire.requestFrom(deviceaddress,1);
	  if (Wire.available()) rdata = Wire.read();
	  return rdata;
	}

	// should not read more than 28 bytes at a time!
	void i2c_eeprom_read_buffer( int deviceaddress, unsigned int eeaddress, byte *buffer, int length )
	{
	  Wire.beginTransmission(deviceaddress);
	  Wire.write((int)(eeaddress >> 8));    // Address High Byte
	  Wire.write((int)(eeaddress & 0xFF));  // Address Low Byte
	  Wire.endTransmission();
	  Wire.requestFrom(deviceaddress,length);
	  //int c = 0;
	  for ( int c = 0; c < length; c++ )
	    if (Wire.available()) buffer[c] = Wire.read();
	}


	`;
prompt.ask(
    [{   
    question: 'Please enter the path to the BIN file to send',
        validator: function(answers){
    	  	try{ 
			  	var ret = fs.existsSync(answers, function(exists) { 
				  	console.log("FILEPATH-", answers);
				 	return exists;
				});
				console.log("EXISTS- ", ret);				
				return ret;
			}
			catch(e){
				return false;
			} 
        },
        color: 'green',
        name: 'name'
    },
    {   
    question: 'Please enter the name of this sketch (upto 10 characters)',
        validator: function(answers){
    	  	try{ 
			  	var ret = false;
			  	if((answers !== undefined) && (answers.length<11) ){
			  		ret = true;
			  	}
				console.log("NAME OK");				
				return ret;
			}
			catch(e){
				return false;
			}
        },
        color: 'yellow',
        name: 'sketchTitle'
    }], function(response){
		    content = fs.readFileSync(response.name);
		    console.log(content);
		    var binDataString = "";
		    var _binDataString = "";
			var myBuffer = [];
			var buffer = new Buffer(content);
			console.log(buffer.length, "SIZE");
			for (var i = 0; i < buffer.length; i++) {
			    // conditional //if(parseInt(buffer[i])!=0){
				    myBuffer.push(buffer[i]);
					// console.log(charNum, buffer[i].toString(16));
					_binDataString += "0x" + buffer[i].toString(16) + ", ";
					charNum ++;
			    // }
			}
			// console.log(binDataString, getByteArrayLength(binDataString));

			var CRCresult = crc32(buffer);
			for(var j = 0; j<CRCresult.length; j++){
				console.log(CRCresult[j].toString(16));
			}
			console.log("CRC32", CRCresult);
			// console.log(Date.now().toString(16));

			var now = new Date;
			// now = Date.now();
			// now = now/1000;
			// console.log(now.toDateHex());
			var hexDate = toHex(now.getTime()/1000|0);
			console.log("HEX DATE", hexDate);
			var eepromMetaData = [];
			var hexLength = toHex(charNum|0);
			console.log(hexLength);
			//METADATA OVERVIEW
			// 0-9 = base metadata (ABminiboot)
			// 10-19 = sketch name (provided in arguments)
			// 20-23 = timestamp of sketch creation (current timestamp hex)
			// 24-27 = timestamp of eeprom write (current timestamp hex)
			// 28-31 = CRC32 (Checksum hex value)
			// 32-33 = Length (size of binary in Hex)
			var metaDataString = "";
			var k=0;
			for (k=0; k<baseMetaData.length; k++){
				eepromMetaData[k] = baseMetaData[k].toString(16);
				metaDataString += "0x" + baseMetaData[k].toString(16) + ", ";
			}
			for(var l=0; l<10; l++){
				if(response.sketchTitle[l]!==undefined){
					eepromMetaData[k] = response.sketchTitle[l].charCodeAt(0).toString(16);
				}
				else {
					eepromMetaData[k] = 'ff';
				}
				metaDataString += "0x" + eepromMetaData[k] + ", ";
				k++;
			}
			for(var l=0; l<8; l++){
				var thisByte = hexDate[l] + hexDate[l+1];
				eepromMetaData[k] = thisByte;
				metaDataString += "0x" + eepromMetaData[k] + ", ";
				l++;
				k++;
			}
			for(var l=0; l<8; l++){
				var thisByte = hexDate[l] + hexDate[l+1];
				eepromMetaData[k] = thisByte;
				metaDataString += "0x" + eepromMetaData[k] + ", ";
				l++;
				k++;
			}
			for(var l=0; l<4; l++){
				var thisByte = CRCresult[l] + CRCresult[l+1];
				eepromMetaData[k] = CRCresult[l].toString(16);
				metaDataString += "0x" + eepromMetaData[k] + ", ";
				k++;
			}
			var lengthHex = charNum.toString(16);
			while(lengthHex[3] === undefined){
				// for(var m=1; m<3; m++){
				// 	lengthHex[m+1] = lengthHex[m];
				// }
				lengthHex = '0'+lengthHex;
				console.log(lengthHex);
			}
			console.log()
			for(var l=0; l<4; l++){
				eepromMetaData[k] = lengthHex[l] + lengthHex[l+1]; 
				metaDataString += "0x" + eepromMetaData[k] + ", ";
				l++;
				k++;
			}
			for(var l=0; l<eepromMetaData.length; l++){
				console.log("Addr ", l , ":  0x", eepromMetaData[l]);
				
			}
			// console.log("METADATASTRING", metaDataString, getByteArrayLength(metaDataString));
			// console.log("Next address = ",k); //should be 20
			binDataString = _.trimEnd(_binDataString, ', ');
			console.log("EEPROM WRITE\n", getByteArrayLength(metaDataString+binDataString))
			outputFile += "const byte binData[] PROGMEM={" + metaDataString+binDataString + "}; \n" + "#define binLength " + getByteArrayLength(metaDataString+binDataString);
    		outputFile += "\n\n" + outputFileBody;
    		// console.log(outputFile);

    		fs.writeFile('output/output.ino', outputFile, 'utf8', (err) => {
			  if (err) throw err;
			  console.log('The file has been saved!');
			});
    }
);

