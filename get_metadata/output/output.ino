
#include <Wire.h>
#define EEPROM_ADDR 0x50           // I2C Buss address of 24LC256 256K EEPROM
const byte binData[] PROGMEM={0x41, 0x42, 0x6d, 0x69, 0x6e, 0x69, 0x62, 0x6f, 0x6f, 0x74, 0x61, 0x73, 0x64, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5A, 0x9D, 0x7E, 0x77, 0x5A, 0x9D, 0x7E, 0x77, 0x46, 0x7c, 0x1, 0x15, 0x04, 0x06, 0xc, 0x94, 0x5c, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x20, 0x1, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0xc, 0x94, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x2, 0x1, 0x0, 0x0, 0x3, 0x4, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0x25, 0x0, 0x28, 0x0, 0x2b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x24, 0x0, 0x27, 0x0, 0x2a, 0x0, 0x11, 0x24, 0x1f, 0xbe, 0xcf, 0xef, 0xd8, 0xe0, 0xde, 0xbf, 0xcd, 0xbf, 0x21, 0xe0, 0xa0, 0xe0, 0xb1, 0xe0, 0x1, 0xc0, 0x1d, 0x92, 0xa9, 0x30, 0xb2, 0x7, 0xe1, 0xf7, 0xe, 0x94, 0xf1, 0x1, 0xc, 0x94, 0x1, 0x2, 0xc, 0x94, 0x0, 0x0, 0x61, 0xe0, 0x83, 0xe0, 0xc, 0x94, 0xb1, 0x0, 0x61, 0xe0, 0x83, 0xe0, 0xe, 0x94, 0xea, 0x0, 0x68, 0xee, 0x73, 0xe0, 0x80, 0xe0, 0x90, 0xe0, 0xe, 0x94, 0x8d, 0x1, 0x60, 0xe0, 0x83, 0xe0, 0xe, 0x94, 0xea, 0x0, 0x68, 0xee, 0x73, 0xe0, 0x80, 0xe0, 0x90, 0xe0, 0xc, 0x94, 0x8d, 0x1, 0x83, 0x30, 0x81, 0xf0, 0x28, 0xf4, 0x81, 0x30, 0x99, 0xf0, 0x82, 0x30, 0xa1, 0xf0, 0x8, 0x95, 0x87, 0x30, 0xa9, 0xf0, 0x88, 0x30, 0xb9, 0xf0, 0x84, 0x30, 0xd1, 0xf4, 0x80, 0x91, 0x80, 0x0, 0x8f, 0x7d, 0x3, 0xc0, 0x80, 0x91, 0x80, 0x0, 0x8f, 0x77, 0x80, 0x93, 0x80, 0x0, 0x8, 0x95, 0x84, 0xb5, 0x8f, 0x77, 0x2, 0xc0, 0x84, 0xb5, 0x8f, 0x7d, 0x84, 0xbd, 0x8, 0x95, 0x80, 0x91, 0xb0, 0x0, 0x8f, 0x77, 0x3, 0xc0, 0x80, 0x91, 0xb0, 0x0, 0x8f, 0x7d, 0x80, 0x93, 0xb0, 0x0, 0x8, 0x95, 0xcf, 0x93, 0xdf, 0x93, 0x90, 0xe0, 0xfc, 0x1, 0xe4, 0x58, 0xff, 0x4f, 0x24, 0x91, 0xfc, 0x1, 0xe0, 0x57, 0xff, 0x4f, 0x84, 0x91, 0x88, 0x23, 0x49, 0xf1, 0x90, 0xe0, 0x88, 0xf, 0x99, 0x1f, 0xfc, 0x1, 0xe2, 0x55, 0xff, 0x4f, 0xa5, 0x91, 0xb4, 0x91, 0x8c, 0x55, 0x9f, 0x4f, 0xfc, 0x1, 0xc5, 0x91, 0xd4, 0x91, 0x9f, 0xb7, 0x61, 0x11, 0x8, 0xc0, 0xf8, 0x94, 0x8c, 0x91, 0x20, 0x95, 0x82, 0x23, 0x8c, 0x93, 0x88, 0x81, 0x82, 0x23, 0xa, 0xc0, 0x62, 0x30, 0x51, 0xf4, 0xf8, 0x94, 0x8c, 0x91, 0x32, 0x2f, 0x30, 0x95, 0x83, 0x23, 0x8c, 0x93, 0x88, 0x81, 0x82, 0x2b, 0x88, 0x83, 0x4, 0xc0, 0xf8, 0x94, 0x8c, 0x91, 0x82, 0x2b, 0x8c, 0x93, 0x9f, 0xbf, 0xdf, 0x91, 0xcf, 0x91, 0x8, 0x95, 0xf, 0x93, 0x1f, 0x93, 0xcf, 0x93, 0xdf, 0x93, 0x1f, 0x92, 0xcd, 0xb7, 0xde, 0xb7, 0x28, 0x2f, 0x30, 0xe0, 0xf9, 0x1, 0xe8, 0x59, 0xff, 0x4f, 0x84, 0x91, 0xf9, 0x1, 0xe4, 0x58, 0xff, 0x4f, 0x14, 0x91, 0xf9, 0x1, 0xe0, 0x57, 0xff, 0x4f, 0x4, 0x91, 0x0, 0x23, 0xc9, 0xf0, 0x88, 0x23, 0x21, 0xf0, 0x69, 0x83, 0xe, 0x94, 0x88, 0x0, 0x69, 0x81, 0xe0, 0x2f, 0xf0, 0xe0, 0xee, 0xf, 0xff, 0x1f, 0xec, 0x55, 0xff, 0x4f, 0xa5, 0x91, 0xb4, 0x91, 0x9f, 0xb7, 0xf8, 0x94, 0x8c, 0x91, 0x61, 0x11, 0x3, 0xc0, 0x10, 0x95, 0x81, 0x23, 0x1, 0xc0, 0x81, 0x2b, 0x8c, 0x93, 0x9f, 0xbf, 0xf, 0x90, 0xdf, 0x91, 0xcf, 0x91, 0x1f, 0x91, 0xf, 0x91, 0x8, 0x95, 0x1f, 0x92, 0xf, 0x92, 0xf, 0xb6, 0xf, 0x92, 0x11, 0x24, 0x2f, 0x93, 0x3f, 0x93, 0x8f, 0x93, 0x9f, 0x93, 0xaf, 0x93, 0xbf, 0x93, 0x80, 0x91, 0x1, 0x1, 0x90, 0x91, 0x2, 0x1, 0xa0, 0x91, 0x3, 0x1, 0xb0, 0x91, 0x4, 0x1, 0x30, 0x91, 0x0, 0x1, 0x23, 0xe0, 0x23, 0xf, 0x2d, 0x37, 0x20, 0xf4, 0x1, 0x96, 0xa1, 0x1d, 0xb1, 0x1d, 0x5, 0xc0, 0x26, 0xe8, 0x23, 0xf, 0x2, 0x96, 0xa1, 0x1d, 0xb1, 0x1d, 0x20, 0x93, 0x0, 0x1, 0x80, 0x93, 0x1, 0x1, 0x90, 0x93, 0x2, 0x1, 0xa0, 0x93, 0x3, 0x1, 0xb0, 0x93, 0x4, 0x1, 0x80, 0x91, 0x5, 0x1, 0x90, 0x91, 0x6, 0x1, 0xa0, 0x91, 0x7, 0x1, 0xb0, 0x91, 0x8, 0x1, 0x1, 0x96, 0xa1, 0x1d, 0xb1, 0x1d, 0x80, 0x93, 0x5, 0x1, 0x90, 0x93, 0x6, 0x1, 0xa0, 0x93, 0x7, 0x1, 0xb0, 0x93, 0x8, 0x1, 0xbf, 0x91, 0xaf, 0x91, 0x9f, 0x91, 0x8f, 0x91, 0x3f, 0x91, 0x2f, 0x91, 0xf, 0x90, 0xf, 0xbe, 0xf, 0x90, 0x1f, 0x90, 0x18, 0x95, 0x3f, 0xb7, 0xf8, 0x94, 0x80, 0x91, 0x5, 0x1, 0x90, 0x91, 0x6, 0x1, 0xa0, 0x91, 0x7, 0x1, 0xb0, 0x91, 0x8, 0x1, 0x26, 0xb5, 0xa8, 0x9b, 0x5, 0xc0, 0x2f, 0x3f, 0x19, 0xf0, 0x1, 0x96, 0xa1, 0x1d, 0xb1, 0x1d, 0x3f, 0xbf, 0x66, 0x27, 0x78, 0x2f, 0x89, 0x2f, 0x9a, 0x2f, 0x62, 0xf, 0x71, 0x1d, 0x81, 0x1d, 0x91, 0x1d, 0x42, 0xe0, 0x66, 0xf, 0x77, 0x1f, 0x88, 0x1f, 0x99, 0x1f, 0x4a, 0x95, 0xd1, 0xf7, 0x8, 0x95, 0xcf, 0x92, 0xdf, 0x92, 0xef, 0x92, 0xff, 0x92, 0xcf, 0x93, 0xdf, 0x93, 0x6b, 0x1, 0x7c, 0x1, 0xe, 0x94, 0x6a, 0x1, 0xeb, 0x1, 0xc1, 0x14, 0xd1, 0x4, 0xe1, 0x4, 0xf1, 0x4, 0x89, 0xf0, 0xe, 0x94, 0x0, 0x2, 0xe, 0x94, 0x6a, 0x1, 0x6c, 0x1b, 0x7d, 0xb, 0x68, 0x3e, 0x73, 0x40, 0x90, 0xf3, 0x81, 0xe0, 0xc8, 0x1a, 0xd1, 0x8, 0xe1, 0x8, 0xf1, 0x8, 0xc8, 0x51, 0xdc, 0x4f, 0xea, 0xcf, 0xdf, 0x91, 0xcf, 0x91, 0xff, 0x90, 0xef, 0x90, 0xdf, 0x90, 0xcf, 0x90, 0x8, 0x95, 0x78, 0x94, 0x84, 0xb5, 0x82, 0x60, 0x84, 0xbd, 0x84, 0xb5, 0x81, 0x60, 0x84, 0xbd, 0x85, 0xb5, 0x82, 0x60, 0x85, 0xbd, 0x85, 0xb5, 0x81, 0x60, 0x85, 0xbd, 0xee, 0xe6, 0xf0, 0xe0, 0x80, 0x81, 0x81, 0x60, 0x80, 0x83, 0xe1, 0xe8, 0xf0, 0xe0, 0x10, 0x82, 0x80, 0x81, 0x82, 0x60, 0x80, 0x83, 0x80, 0x81, 0x81, 0x60, 0x80, 0x83, 0xe0, 0xe8, 0xf0, 0xe0, 0x80, 0x81, 0x81, 0x60, 0x80, 0x83, 0xe1, 0xeb, 0xf0, 0xe0, 0x80, 0x81, 0x84, 0x60, 0x80, 0x83, 0xe0, 0xeb, 0xf0, 0xe0, 0x80, 0x81, 0x81, 0x60, 0x80, 0x83, 0xea, 0xe7, 0xf0, 0xe0, 0x80, 0x81, 0x84, 0x60, 0x80, 0x83, 0x80, 0x81, 0x82, 0x60, 0x80, 0x83, 0x80, 0x81, 0x81, 0x60, 0x80, 0x83, 0x80, 0x81, 0x80, 0x68, 0x80, 0x83, 0x10, 0x92, 0xc1, 0x0, 0x8, 0x95, 0x8, 0x95, 0xe, 0x94, 0xb5, 0x1, 0xe, 0x94, 0xf0, 0x1, 0xe, 0x94, 0x70, 0x0, 0xc0, 0xe0, 0xd0, 0xe0, 0xe, 0x94, 0x74, 0x0, 0x20, 0x97, 0xe1, 0xf3, 0xe, 0x94, 0x0, 0x0, 0xf9, 0xcf, 0x8, 0x95, 0xf8, 0x94, 0xff, 0xcf}; 
#define binLength 1064


	void setup()
	{
	  pinMode(3, OUTPUT);
	  Wire.begin();                        // join I2C bus (address optional for master)
	  Serial.begin(9600);
	  for(int j=0; j<5; j++){
	  	digitalWrite(3, HIGH);
	  	delay(j*100);
	  	digitalWrite(3, LOW);
	  	delay(j*j*50);
	  }
	  
	  for (int i=0; i<binLength; i++){
	   digitalWrite(3, i%2);
	   byte dataByte = pgm_read_byte_near(binData + i);
	   i2c_eeprom_write_byte(EEPROM_ADDR, i, dataByte);
	   Serial.println();
	   Serial.print("Wrote: "); Serial.print(dataByte, HEX); Serial.print(" @ ");Serial.print(i);
	   delay(100);
	  }
	  
	  for (int i=0; i<binLength; i++){            // loop for first 20 slots
	    Serial.print(i); Serial.print(":");
	    Serial.print((i2c_eeprom_read_byte(EEPROM_ADDR, i)), HEX);
	    delay(50);
	    Serial.println();
	  }  
	  
	}

	void loop()
	{
	}

	void i2c_eeprom_write_byte( int deviceaddress, unsigned int eeaddress, byte data )
	{
	  int rdata = data;
	  Wire.beginTransmission(deviceaddress);
	  Wire.write((int)(eeaddress >> 8));    // Address High Byte
	  Wire.write((int)(eeaddress & 0xFF));  // Address Low Byte
	  Wire.write(rdata);
	  Wire.endTransmission();
	}

	// Address is a page address, 6-bit (63). More and end will wrap around
	// But data can be maximum of 28 bytes, because the Wire library has a buffer of 32 bytes
	void i2c_eeprom_write_page
	( int deviceaddress, unsigned int eeaddresspage, byte* data, byte length )
	{
	  Wire.beginTransmission(deviceaddress);
	  Wire.write((int)(eeaddresspage >> 8)); // Address High Byte
	  Wire.write((int)(eeaddresspage & 0xFF)); // Address Low Byte
	  byte c;
	  for ( c = 0; c < length; c++)
	    Wire.write(data[c]);
	  Wire.endTransmission();
	  delay(10);                           // need some delay
	}

	byte i2c_eeprom_read_byte( int deviceaddress, unsigned int eeaddress )
	{
	  byte rdata = 0xFF;
	  Wire.beginTransmission(deviceaddress);
	  Wire.write((int)(eeaddress >> 8));    // Address High Byte
	  Wire.write((int)(eeaddress & 0xFF));  // Address Low Byte
	  Wire.endTransmission();
	  Wire.requestFrom(deviceaddress,1);
	  if (Wire.available()) rdata = Wire.read();
	  return rdata;
	}

	// should not read more than 28 bytes at a time!
	void i2c_eeprom_read_buffer( int deviceaddress, unsigned int eeaddress, byte *buffer, int length )
	{
	  Wire.beginTransmission(deviceaddress);
	  Wire.write((int)(eeaddress >> 8));    // Address High Byte
	  Wire.write((int)(eeaddress & 0xFF));  // Address Low Byte
	  Wire.endTransmission();
	  Wire.requestFrom(deviceaddress,length);
	  //int c = 0;
	  for ( int c = 0; c < length; c++ )
	    if (Wire.available()) buffer[c] = Wire.read();
	}


	